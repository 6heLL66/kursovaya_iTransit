[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3785,"mtime":1612133777689,"results":"38","hashOfConfig":"37"},{"size":8447,"mtime":1612085343316,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1139,"mtime":1612089500963,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4423,"mtime":1612133424517,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612087768542,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1251,"mtime":1612089570524,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["151","152"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["153"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["154"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["155"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["156","157","158"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":33,"column":8,"nodeType":"170","endLine":33,"endColumn":24,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":36,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"173","line":44,"column":43,"nodeType":"174","messageId":"175","endLine":44,"endColumn":44},{"ruleId":"168","severity":1,"message":"176","line":41,"column":8,"nodeType":"170","endLine":41,"endColumn":21,"suggestions":"177"},{"ruleId":"168","severity":1,"message":"178","line":52,"column":8,"nodeType":"170","endLine":52,"endColumn":21,"suggestions":"179"},{"ruleId":"172","severity":1,"message":"173","line":56,"column":43,"nodeType":"174","messageId":"175","endLine":56,"endColumn":44},{"ruleId":"168","severity":1,"message":"180","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":16,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":77,"column":8,"nodeType":"170","endLine":77,"endColumn":10,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":31,"column":8,"nodeType":"170","endLine":31,"endColumn":22,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":27,"column":8,"nodeType":"170","endLine":27,"endColumn":10,"suggestions":"187"},{"ruleId":"168","severity":1,"message":"188","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":24,"suggestions":"189"},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["192"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["195"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["198"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["199"],"no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [advancedFields, form]",{"range":"216","text":"217"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"218","text":"219"},"Update the dependencies array to be: [theme, lang, login]",{"range":"220","text":"221"},"Update the dependencies array to be: [fields, item]",{"range":"222","text":"223"},"Update the dependencies array to be: [loadItem]",{"range":"224","text":"225"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"226","text":"227"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"228","text":"229"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"230","text":"231"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[1837,1850],"[theme, lang, login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]